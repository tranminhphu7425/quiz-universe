import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  User,
  Mail,
  Lock,
  ShieldCheck,
  Globe,
  Clock,
  FileText,
  Eye,
  Bell,
  Zap,
  Cookie,
  Trash2,
  Smartphone,
  RefreshCw,
  Palette,
  Volume2,
  Focus,
  KeyRound,
  LogOut,
} from "lucide-react";
import React from "react";
import { useAuth } from "@/app/providers/AuthProvider";
import { fetchUniversities, fetchMajors, University, Major } from "@/shared/api/major-universityApi";
import { Combobox } from "@headlessui/react";
import { Navigate, useNavigate } from "react-router-dom";

/**
 * SettingsPage ‚Äì Trang C√†i ƒë·∫∑t to√†n di·ªán cho QuizUniverse
 * Bao g·ªìm: Account, Quiz Preferences, Notifications, Privacy & Data, System
 */

export default function SettingsPage() {
  // States (mock)
  const [twoFA, setTwoFA] = useState(false);
  const [darkMode, setDarkMode] = useState(true);
  const [countdown, setCountdown] = useState(true);
  const [perPage, setPerPage] = useState("5");
  const [notifyEmail, setNotifyEmail] = useState(true);
  const [notifyApp, setNotifyApp] = useState(true);
  const [alertLogin, setAlertLogin] = useState(true);
  const [hideInfo, setHideInfo] = useState(false);
  const [allowCookies, setAllowCookies] = useState(true);
  const [activeSection, setActiveSection] = useState<string | null>(null);
  const [activeItem, setActiveItem] = useState<string | null>(null);
  const [soundEnabled, setSoundEnabled] = useState<boolean | null>(null);
  const [focusMode, setFocusMode] = useState<boolean | null>(null);
  const { user, logout } = useAuth();
  const [universities, setUniversities] = useState<University[]>([]);
  const [university, setUniversity] = useState<University | undefined>(user?.university);
  const [majors, setMajors] = useState<Major[]>([]);
  const [major, setMajor] = useState<Major | undefined>(user?.major);
  const [loading, setLoading] = useState(true);
  const [majorQuery, setMajorQuery] = useState("");
  const [universityQuery, setUniversityQuery] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    async function loadUniversitiesAndMajors() {
      try {
        const [unis, majors] = await Promise.all([
          fetchUniversities(),
          fetchMajors(),
        ]);
        setUniversities(unis);
        setMajors(majors);
        console.log(unis);
        console.log(majors);

      } finally {
        setLoading(false);
      }
    }
    loadUniversitiesAndMajors();
  }, []);

  function removeVietnameseTones(str: string) {
    return str
      .normalize("NFD")                // t√°ch d·∫•u kh·ªèi k√Ω t·ª±
      .replace(/[\u0300-\u036f]/g, "") // xo√° to√†n b·ªô d·∫•u
      .replace(/ƒë/g, "d")
      .replace(/ƒê/g, "D");
  }

  const universityFiltered =
    universityQuery === ""
      ? universities
      : universities.filter((u) =>
        removeVietnameseTones(
          (u.universityCode + " " + u.universityName).toLowerCase()
        ).includes(removeVietnameseTones(universityQuery.toLowerCase()))
      );
  const majorFiltered =
    majorQuery === ""
      ? majors
      : (Array.isArray(majors) ? majors : []).filter((u) =>
        removeVietnameseTones(u.majorName.toLowerCase()).includes(
          removeVietnameseTones(majorQuery.toLowerCase())
        )
      );

  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 px-6 py-10">
      <h1 className="max-w-7xl mx-auto mb-8 text-3xl font-black text-emerald-700 dark:text-emerald-300">
        ‚öôÔ∏è C√†i ƒë·∫∑t
      </h1>



      <div
        className={`max-w-7xl mx-auto grid grid-cols-1 gap-8
    ${activeSection ? "lg:grid-cols-1 xl:grid-cols-1" : "lg:grid-cols-2 xl:grid-cols-3"}`}
      >

        {/* 1. Account */}
        {(!activeSection || activeSection === "account") && (
          <Section
            id="account" // üëà th√™m id cho Section
            title="T√†i kho·∫£n (Account)"
            icon={<User className="h-5 w-5" />}
            setActiveSection={setActiveSection}
            activeSection={activeSection}
            activeItem={activeItem}
            setActiveItem={setActiveItem}
          >
            <Item id="profile" icon={<Mail />} title="Th√¥ng tin c√° nh√¢n">
              T√™n, email, ·∫£nh ƒë·∫°i di·ªán.


            </Item>

            <div className="ml-5">
              {/* Khi m·ªü chi ti·∫øt */}
              {activeSection === "account" && activeItem === "profile" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
                  </h3>

                  <div className="space-y-5">
                    {/* Avatar */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        ·∫¢nh ƒë·∫°i di·ªán
                      </label>
                      <div className="flex items-center gap-4">
                        <img
                          src="https://via.placeholder.com/64"
                          alt="Avatar"
                          className="h-16 w-16 rounded-full object-cover ring-2 ring-emerald-400"
                        />
                        <input
                          title="file"
                          type="file"
                          accept="image/*"
                          className="text-sm text-slate-600 file:mr-4 file:rounded-md file:border-0 file:bg-emerald-600 file:px-3 file:py-1 file:text-sm file:font-medium file:text-white hover:file:bg-emerald-700 dark:text-slate-400"
                        />
                      </div>
                    </div>

                    {/* H·ªç v√† t√™n */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        H·ªç v√† t√™n
                      </label>
                      <input
                        title="text"
                        type="text"
                        defaultValue={user?.name}
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* Username */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        Username
                      </label>
                      <input
                        title="username"
                        type="text"
                        defaultValue={user?.username}
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* Email */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        Email
                      </label>
                      <input
                        title="email"
                        type="email"
                        defaultValue={user?.email}
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* S·ªë ƒëi·ªán tho·∫°i */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        S·ªë ƒëi·ªán tho·∫°i
                      </label>
                      <input
                        title="tel"
                        type="tel"
                        defaultValue={user?.phone}
                        placeholder="0123 456 789"
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* Tr∆∞·ªùng ƒëang h·ªçc */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        Tr∆∞·ªùng ƒëang h·ªçc
                      </label>
                      <Combobox value={university} onChange={setUniversity}>
                        <div className="relative">
                          <Combobox.Input
                            className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 
                       text-sm text-slate-800 shadow-sm 
                       focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 
                       dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                            displayValue={(u: any) => (u?.universityCode + " - " + u?.universityName)}
                            onChange={(e) => setUniversityQuery(e.target.value)}
                            placeholder="Ch·ªçn ho·∫∑c nh·∫≠p t√™n tr∆∞·ªùng"
                          />
                          {universityFiltered.length > 0 && (
                            <Combobox.Options
                              className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-lg border 
                         border-slate-200 bg-white py-1 shadow-lg 
                         dark:border-slate-700 dark:bg-slate-900"
                            >
                              {universityFiltered.map((u) => (
                                <Combobox.Option
                                  key={u.universityCode}
                                  value={u}
                                  className={({ active }) =>
                                    `cursor-pointer select-none px-3 py-2 text-sm ${active
                                      ? "bg-emerald-600 text-white"
                                      : "text-slate-800 dark:text-slate-100"
                                    }`
                                  }
                                >
                                  {u.universityName}
                                </Combobox.Option>
                              ))}
                            </Combobox.Options>
                          )}
                        </div>
                      </Combobox>
                    </div>
                    {/* Ng√†nh ƒëang h·ªçc */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        Ng√†nh ƒëang h·ªçc
                      </label>
                      <Combobox value={major} onChange={setMajor}>
                        <div className="relative">
                          <Combobox.Input
                            className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 
                       text-sm text-slate-800 shadow-sm 
                       focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 
                       dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                            displayValue={(u: any) => (u?.majorName)}
                            onChange={(e) => setMajorQuery(e.target.value)}
                            placeholder="Ch·ªçn ho·∫∑c nh·∫≠p t√™n ng√†nh"
                          />
                          {majorFiltered.length > 0 && (
                            <Combobox.Options
                              className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-lg border 
                         border-slate-200 bg-white py-1 shadow-lg 
                         dark:border-slate-700 dark:bg-slate-900"
                            >
                              {majorFiltered.map((u) => (
                                <Combobox.Option
                                  key={u.majorId}
                                  value={u}
                                  className={({ active }) =>
                                    `cursor-pointer select-none px-3 py-2 text-sm ${active
                                      ? "bg-emerald-600 text-white"
                                      : "text-slate-800 dark:text-slate-100"
                                    }`
                                  }
                                >
                                  {u.majorName}
                                </Combobox.Option>
                              ))}
                            </Combobox.Options>
                          )}
                        </div>
                      </Combobox>
                    </div>
                    {/* N√∫t l∆∞u thay ƒë·ªïi */}
                    <div className="flex justify-end pt-4">
                      <button
                        onClick={() => {
                          // TODO: g·ªçi API l∆∞u th√¥ng tin
                          console.log("L∆∞u thay ƒë·ªïi th√¥ng tin c√° nh√¢n");
                        }}
                        className="rounded-lg bg-emerald-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-400"
                      >
                        L∆∞u thay ƒë·ªïi
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <Item id="password" icon={<Lock />} title="ƒê·ªïi m·∫≠t kh·∫©u">
              <button className="text-sm">Thay ƒë·ªïi m·∫≠t kh·∫©u</button>
            </Item>

            <div className="ml-5">
              {/* Khi m·ªü chi ti·∫øt */}
              {activeSection === "account" && activeItem === "password" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    Thay ƒë·ªïi m·∫≠t kh·∫©u
                  </h3>

                  <div className="space-y-5">
                    {/* M·∫≠t kh·∫©u hi·ªán t·∫°i */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        M·∫≠t kh·∫©u hi·ªán t·∫°i
                      </label>
                      <input
                        type="password"
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* M·∫≠t kh·∫©u m·ªõi */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        M·∫≠t kh·∫©u m·ªõi
                      </label>
                      <input
                        type="password"
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">
                        X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
                      </label>
                      <input
                        type="password"
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      />
                    </div>

                    {/* N√∫t l∆∞u */}
                    <div className="flex justify-end">
                      <button className="rounded-lg bg-emerald-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-400">
                        C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <Item id="security" icon={<ShieldCheck />} title="B·∫£o m·∫≠t">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Qu·∫£n l√Ω x√°c th·ª±c 2 l·ªõp
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "account" && activeItem === "security" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    B·∫£o m·∫≠t t√†i kho·∫£n
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        X√°c th·ª±c hai l·ªõp (2FA)
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        Y√™u c·∫ßu m√£ OTP khi ƒëƒÉng nh·∫≠p ƒë·ªÉ tƒÉng c∆∞·ªùng b·∫£o m·∫≠t.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setTwoFA(!twoFA)}
                      className={`${twoFA ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${twoFA ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>

            <Item id="locale" icon={<Globe />} title="Ng√¥n ng·ªØ & M√∫i gi·ªù">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                T√πy ch·ªânh ng√¥n ng·ªØ v√† m√∫i gi·ªù
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "account" && activeItem === "locale" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    Ng√¥n ng·ªØ & M√∫i gi·ªù
                  </h3>

                  <div className="space-y-5">
                    {/* Ng√¥n ng·ªØ */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        Ng√¥n ng·ªØ hi·ªÉn th·ªã
                      </label>
                      <select
                        className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                        defaultValue="vi"
                      >
                        <option value="vi">Ti·∫øng Vi·ªát</option>
                        <option value="en">English</option>
                      </select>
                    </div>

                    {/* M√∫i gi·ªù */}
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        M√∫i gi·ªù
                      </label>
                      <select
                        className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                        defaultValue="GMT+7"
                      >
                        <option value="GMT+7">(GMT+7) Asia/Ho_Chi_Minh</option>
                        <option value="GMT+8">(GMT+8) Asia/Singapore</option>
                        <option value="GMT+9">(GMT+9) Asia/Tokyo</option>
                        <option value="GMT+0">(GMT+0) UTC</option>
                      </select>
                    </div>

                    {/* N√∫t l∆∞u */}
                    <div className="flex justify-end">
                      <button className="rounded-lg bg-emerald-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-400">
                        L∆∞u thay ƒë·ªïi
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <Item id="logout" icon={<LogOut />} title="ƒêƒÉng xu·∫•t">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Tho√°t kh·ªèi t√†i kho·∫£n c·ªßa b·∫°n
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "account" && activeItem === "logout" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    ƒêƒÉng xu·∫•t
                  </h3>

                  <p className="mb-4 text-sm text-slate-600 dark:text-slate-400">
                    B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng?
                  </p>

                  <div className="flex justify-end gap-3">
                    <button
                      className="rounded-lg bg-slate-200 px-4 py-2 text-sm font-medium text-slate-800 shadow hover:bg-slate-300 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600"
                      onClick={() => setActiveItem(null)}
                    >
                      H·ªßy
                    </button>
                    <button
                      className="rounded-lg bg-red-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-400"
                      onClick={async () => {
                                await logout();
                                navigate("/login");
                              }} // üëà g·ªçi h√†m logout t·ª´ AuthContext
                    >
                      ƒêƒÉng xu·∫•t
                    </button>
                  </div>
                </div>
              )}
            </div>


          </Section>
        )}



        {/* 2. Quiz Preferences */}
        {(!activeSection || activeSection === "quiz") && (
          <Section
            id="quiz" // üëà th√™m id cho Section
            title="L√†m b√†i & Hi·ªÉn th·ªã"
            icon={<Clock className="h-5 w-5" />}
            setActiveSection={setActiveSection}
            activeSection={activeSection}
            activeItem={activeItem}
            setActiveItem={setActiveItem}
          >
            <Item id="timer" icon={<Clock />} title="Th·ªùi gian">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Qu·∫£n l√Ω hi·ªÉn th·ªã ƒë·ªìng h·ªì
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "quiz" && activeItem === "timer" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    C√†i ƒë·∫∑t th·ªùi gian
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Hi·ªÉn th·ªã ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        B·∫≠t ƒë·ªÉ xem b·ªô ƒë·∫øm ng∆∞·ª£c trong khi l√†m b√†i ki·ªÉm tra.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setCountdown(!countdown)}
                      className={`${countdown ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${countdown ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>


            <Item id="perPage" icon={<FileText />} title="S·ªë c√¢u tr√™n m·ªôt trang">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                T√πy ch·ªânh s·ªë c√¢u hi·ªÉn th·ªã
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "quiz" && activeItem === "perPage" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    S·ªë c√¢u h·ªèi tr√™n m·ªói trang
                  </h3>

                  <div className="space-y-5">
                    <div>
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        Ch·ªçn s·ªë c√¢u hi·ªÉn th·ªã
                      </label>
                      <select title="Ch·ªçn s·ªë c√¢u hi·ªÉn th·ªã"
                        value={perPage}
                        onChange={(e) => setPerPage(e.target.value)}
                        className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                      >
                        <option value="1">1 c√¢u / trang</option>
                        <option value="5">5 c√¢u / trang</option>
                        <option value="10">10 c√¢u / trang</option>
                        <option value="all">T·∫•t c·∫£</option>
                      </select>
                      <p className="mt-1 text-xs text-slate-500 dark:text-slate-400">
                        B·∫°n c√≥ th·ªÉ thay ƒë·ªïi s·ªë c√¢u hi·ªÉn th·ªã khi l√†m b√†i ki·ªÉm tra.
                      </p>
                    </div>

                    {/* N√∫t l∆∞u */}
                    <div className="flex justify-end">
                      <button className="rounded-lg bg-emerald-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-400">
                        L∆∞u thay ƒë·ªïi
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <Item id="theme" icon={<Palette />} title="Giao di·ªán">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Tu·ª≥ ch·ªânh ch·∫ø ƒë·ªô hi·ªÉn th·ªã
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "quiz" && activeItem === "theme" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    C√†i ƒë·∫∑t giao di·ªán
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Ch·∫ø ƒë·ªô t·ªëi (Dark mode)
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        Gi√∫p gi·∫£m m·ªèi m·∫Øt v√† ti·∫øt ki·ªám pin tr√™n thi·∫øt b·ªã OLED.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setDarkMode(!darkMode)}
                      className={`${darkMode ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${darkMode ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>


            <Item id="sound" icon={<Volume2 />} title="√Çm thanh th√¥ng b√°o">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Qu·∫£n l√Ω th√¥ng b√°o b·∫±ng √¢m thanh
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "quiz" && activeItem === "sound" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    √Çm thanh th√¥ng b√°o
                  </h3>

                  {/* Toggle b·∫≠t/t·∫Øt √¢m thanh */}
                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        B·∫≠t √¢m thanh khi h·∫øt gi·ªù / n·ªôp b√†i
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        C·∫£nh b√°o b·∫±ng √¢m thanh ƒë·ªÉ b·∫°n kh√¥ng b·ªè l·ª° th·ªùi gian quan tr·ªçng.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setSoundEnabled(!soundEnabled)}
                      className={`${soundEnabled ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${soundEnabled ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>

                  {/* Ch·ªçn lo·∫°i √¢m thanh (tu·ª≥ ch·ªçn) */}
                  {soundEnabled && (
                    <div className="mt-4">
                      <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                        Lo·∫°i √¢m thanh
                      </label>
                      <select
                        className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm shadow-sm focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100"
                        defaultValue="ding"
                      >
                        <option value="ding">Ding (nh·∫π nh√†ng)</option>
                        <option value="alert">Alert (c·∫£nh b√°o)</option>
                        <option value="bell">Bell (chu√¥ng)</option>
                      </select>
                    </div>
                  )}
                </div>
              )}
            </div>


            <Item id="focusMode" icon={<Focus />} title="Ch·∫ø ƒë·ªô t·∫≠p trung">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                T√πy ch·ªânh tr·∫£i nghi·ªám khi l√†m b√†i
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "quiz" && activeItem === "focusMode" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    Ch·∫ø ƒë·ªô t·∫≠p trung
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        ·∫®n thanh ƒëi·ªÅu h∆∞·ªõng khi l√†m b√†i
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        B·∫≠t ch·∫ø ƒë·ªô t·∫≠p trung ƒë·ªÉ lo·∫°i b·ªè xao nh√£ng v√† ch·ªâ hi·ªÉn th·ªã n·ªôi dung b√†i ki·ªÉm tra.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setFocusMode(!focusMode)}
                      className={`${focusMode ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${focusMode ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>

          </Section>
        )}


        {/* 3. Notifications */}
        {(!activeSection || activeSection === "notify") && (
          <Section
            id="notify" // üëà id cho Section
            title="Th√¥ng b√°o"
            icon={<Bell className="h-5 w-5" />}
            setActiveSection={setActiveSection}
            activeSection={activeSection}
            activeItem={activeItem}
            setActiveItem={setActiveItem}
          >
            {/* Email/SMS Notify */}
            <Item id="emailNotify" icon={<Mail />} title="Email/SMS">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Nh·∫≠n th√¥ng b√°o qua email ho·∫∑c SMS
              </span>
            </Item>
            <div className="ml-5">
              {activeSection === "notify" && activeItem === "emailNotify" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    Th√¥ng b√°o qua Email / SMS
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Nh·∫≠n k·∫øt qu·∫£, b√°o c√°o ƒëi·ªÉm, l·ªãch thi
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        B·∫°n s·∫Ω ƒë∆∞·ª£c g·ª≠i th√¥ng tin chi ti·∫øt qua email/SMS khi c√≥ c·∫≠p nh·∫≠t quan tr·ªçng.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setNotifyEmail(!notifyEmail)}
                      className={`${notifyEmail ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${notifyEmail ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>

            {/* App Notify */}
            <Item id="appNotify" icon={<Bell />} title="Th√¥ng b√°o trong ·ª©ng d·ª•ng">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                Nh·∫≠n th√¥ng b√°o ngay trong ·ª©ng d·ª•ng
              </span>
            </Item>
            <div className="ml-5">
              {activeSection === "notify" && activeItem === "appNotify" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    Th√¥ng b√°o trong ·ª©ng d·ª•ng
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Khi c√≥ b√†i ki·ªÉm tra m·ªõi, gi√°o vi√™n ƒëƒÉng c√¢u h·ªèi
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        Th√¥ng b√°o s·∫Ω hi·ªÉn th·ªã ngay tr√™n ·ª©ng d·ª•ng ƒë·ªÉ b·∫°n kh√¥ng b·ªè l·ª° th√¥ng tin.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setNotifyApp(!notifyApp)}
                      className={`${notifyApp ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${notifyApp ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>

            <Item id="loginAlert" icon={<Zap />} title="C·∫£nh b√°o ƒëƒÉng nh·∫≠p b·∫•t th∆∞·ªùng">
              <span className="text-sm text-slate-600 dark:text-slate-400">
                B·∫£o v·ªá t√†i kho·∫£n khi c√≥ ho·∫°t ƒë·ªông l·∫°
              </span>
            </Item>

            <div className="ml-5">
              {activeSection === "notify" && activeItem === "loginAlert" && (
                <div className="mt-4 rounded-xl border border-slate-200 bg-white p-6 shadow-md dark:border-slate-700 dark:bg-slate-900">
                  <h3 className="mb-4 text-lg font-semibold text-slate-800 dark:text-slate-100">
                    C·∫£nh b√°o ƒëƒÉng nh·∫≠p b·∫•t th∆∞·ªùng
                  </h3>

                  <div className="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800/50">
                    <div>
                      <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        B·∫≠t c·∫£nh b√°o ƒëƒÉng nh·∫≠p
                      </p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">
                        G·ª≠i th√¥ng b√°o ngay khi ph√°t hi·ªán ƒëƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã ho·∫∑c v·ªã tr√≠ l·∫°.
                      </p>
                    </div>

                    {/* Toggle switch */}
                    <button
                      onClick={() => setAlertLogin(!alertLogin)}
                      className={`${alertLogin ? "bg-emerald-600" : "bg-slate-300 dark:bg-slate-600"
                        } relative inline-flex h-6 w-11 items-center rounded-full transition`}
                    >
                      <span
                        className={`${alertLogin ? "translate-x-6" : "translate-x-1"
                          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                      />
                    </button>
                  </div>
                </div>
              )}
            </div>

          </Section>
        )}


        {/* 4. Privacy & Data */}
        {(!activeSection || activeSection === "privacy") && (
          <Section
            id="privacy" // üëà id cho Section
            title="Quy·ªÅn ri√™ng t∆∞ & D·ªØ li·ªáu"
            icon={<Eye className="h-5 w-5" />}
            setActiveSection={setActiveSection}
            activeSection={activeSection}
            activeItem={activeItem}
            setActiveItem={setActiveItem}
          >
            <Item id="hideInfo" icon={<Eye />} title="·∫®n th√¥ng tin c√° nh√¢n">
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={hideInfo}
                  onChange={() => setHideInfo(!hideInfo)}
                />
                Hi·ªÉn th·ªã nickname thay v√¨ t√™n th·∫≠t
              </label>
            </Item>

            <Item id="exportData" icon={<FileText />} title="Xu·∫•t d·ªØ li·ªáu">
              <button className="rounded bg-emerald-600 px-3 py-1 text-sm text-white">
                Xu·∫•t l·ªãch s·ª≠ l√†m b√†i
              </button>
            </Item>

            <Item id="deleteAccount" icon={<Trash2 />} title="Xo√° t√†i kho·∫£n/d·ªØ li·ªáu">
              <button className="text-sm text-red-600 underline">Xo√° vƒ©nh vi·ªÖn</button>
            </Item>

            <Item id="cookies" icon={<Cookie />} title="Cookie & Tracking">
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={allowCookies}
                  onChange={() => setAllowCookies(!allowCookies)}
                />
                Cho ph√©p cookie ph√¢n t√≠ch
              </label>
            </Item>
          </Section>
        )}


        {/* 5. System */}
        {(!activeSection || activeSection === "system") && (
          <Section
            id="system" // üëà id cho Section
            title="H·ªá th·ªëng & K·ªπ thu·∫≠t"
            icon={<KeyRound className="h-5 w-5" />}
            setActiveSection={setActiveSection}
            activeSection={activeSection}
            activeItem={activeItem}
            setActiveItem={setActiveItem}
          >
            <Item id="apiKey" icon={<KeyRound />} title="API Key / Access Token">
              <p className="text-xs text-slate-500">(D√†nh cho gi√°o vi√™n / dev)</p>
              <button className="mt-1 rounded bg-slate-200 px-2 py-1 text-xs dark:bg-slate-700">
                T·∫°o m·ªõi
              </button>
            </Item>

            <Item id="devices" icon={<Smartphone />} title="Thi·∫øt b·ªã ƒë√£ ƒëƒÉng nh·∫≠p">
              <ul className="list-disc pl-5 text-sm">
                <li>
                  Chrome - Windows 10{" "}
                  <button className="ml-2 text-xs text-red-600 underline">ƒêƒÉng xu·∫•t</button>
                </li>
                <li>Safari - iPhone 14</li>
              </ul>
            </Item>

            <Item id="reset" icon={<RefreshCw />} title="Reset c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh">
              <button className="rounded bg-red-500 px-3 py-1 text-sm text-white">Reset</button>
            </Item>
          </Section>
        )}


      </div>

      <p className="mt-10 text-center text-xs text-slate-500 dark:text-slate-400">
        C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {new Date().toLocaleDateString()}
      </p>
    </div>
  );
}

function Section({
  id,
  title,
  icon,
  children,
  setActiveSection,
  activeSection,
  activeItem,
  setActiveItem
}: {
  id: string;
  title: string;
  icon: React.ReactNode;
  children: React.ReactNode;
  setActiveSection: (id: string | null) => void;
  activeSection: string | null;
  activeItem: string | null;
  setActiveItem: (id: string | null) => void;
}) {
  return (
    <motion.div
      key={id}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20, scale: 0.9 }}
      transition={{ duration: 0.3, ease: "easeInOut" }}
      className="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm dark:border-slate-800 dark:bg-slate-900"
    >
      <h2 className="mb-4 flex items-center gap-2 text-base font-bold text-emerald-700 dark:text-emerald-300">
        {icon} {title}
      </h2>
      <div className="space-y-4">
        {React.Children.map(children, (child: any) =>
          React.cloneElement(child, {
            sectionId: id,
            setActiveSection,
            activeSection,
            activeItem,
            setActiveItem,
          })
        )}
      </div>
    </motion.div>
  );
}

function Item({
  id,
  sectionId,
  icon,
  title,
  children,
  setActiveSection,
  activeSection,
  activeItem,
  setActiveItem
}: {
  id: string;
  sectionId?: string;
  icon: React.ReactNode;
  title: string;
  children: React.ReactNode;
  setActiveSection?: (id: string | null) => void;
  activeSection?: string | null;
  activeItem?: string | null;
  setActiveItem?: (id: string | null) => void;
}) {
  const isActive = activeItem === id && activeSection === sectionId;



  const handleClick = () => {
    if (isActive) {
      // N·∫øu ƒëang m·ªü ‚Üí ƒë√≥ng l·∫°i
      setActiveSection?.(null);
      setActiveItem?.(null);
    } else {
      // N·∫øu ch∆∞a m·ªü ‚Üí m·ªü item n√†y
      setActiveSection?.(sectionId!);
      setActiveItem?.(id);
    }
  };

  return (
    <div
      onClick={handleClick}
      className={`cursor-pointer flex items-start gap-3 rounded-lg border p-3 transition
        ${isActive ? "border-emerald-500 bg-emerald-50 dark:bg-slate-800" : "border-slate-200 dark:border-slate-800"}`}
    >
      <div className="mt-1 text-emerald-600 dark:text-emerald-300">{icon}</div>
      <div className="flex-1">
        <div className="font-semibold text-slate-800 dark:text-slate-200">
          {title} {isActive && "‚úÖ"}
        </div>
        <div className="mt-1 text-sm text-slate-600 dark:text-slate-400">
          {children}
        </div>
        {isActive && (
          <div className="mt-2 text-xs text-emerald-700 dark:text-emerald-300">
            {/* ch·ªó n√†y b·∫°n c√≥ th·ªÉ render chi ti·∫øt h∆°n c·ªßa t√πy ch·ªçn */}
            Tu·ª≥ ch·ªçn chi ti·∫øt cho {title}
          </div>
        )}
      </div>
    </div>
  );
}
